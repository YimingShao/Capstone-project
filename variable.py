import pygame
import random
import parameters
from gentopology import createsnc
from GameEnv import GameEnv
from collections import deque

pa = parameters.Parameters()
snc = createsnc(pa.num_machines)
env = None

def create_env(jobqueue):
    global env
    env = GameEnv(pa, snc, jobqueue)

def get_env():
    return env


BACKGROUND_COLOR = (245, 240, 223)
JOB_SELECTED_COLOR = (117, 18, 57)
JUST_PICKED_UP_COLOR = (51, 41, 45)
SPEED_COLOR = (104, 156, 110)
JOB_SIZE_COLOR = (191, 70, 40)
GPU_REQUIRMENT_COLOR = (120, 90, 120)
RUNNING_COLOR = (74, 181, 105)
PROGRESS_BAR_COLOR = (73, 107, 133)
JOB_STOP_COLOR = (173, 7, 35)
RACK_SELECTED_COLOR = (138, 79, 59)
QUEUE_SELECTED_COLOR = (55, 82, 67)

UNIT_LENGTH = 1000
SCREEN_WIDTH = int(1.5 * UNIT_LENGTH)
SCREEN_HEIGHT = int(0.9 * UNIT_LENGTH)

# CLUSTER attributes
CLUSTER_SPACE = int(0.015 * UNIT_LENGTH)       # The space between clusters
CLUSTER_BORDER = int(0.005 * UNIT_LENGTH)
CLUSTER_BORDER_SELECTED = int(CLUSTER_BORDER * 2)    # The border size when it is selected
CLUSTER_WIDTH = int((0.65 * SCREEN_WIDTH)/2)
CLUSTER_HEIGHT = int((SCREEN_HEIGHT/2) * 0.95)

# QUEUE attributes
QUEUE_X = int(0.78 * SCREEN_WIDTH)
QUEUE_BORDER = int(0.005 * UNIT_LENGTH)
QUEUE_WIDTH = int(0.2 * SCREEN_WIDTH)
QUEUE_HEIGHT = int(2 * CLUSTER_HEIGHT + CLUSTER_SPACE)
QUEUE_BORDER_SELECTED = (QUEUE_BORDER * 2)

# SIDE_VIEW attributes
SIDE_VIEW_X = int(CLUSTER_SPACE * 3 + 2 * CLUSTER_WIDTH)
SIDE_VIEW_Y = int(CLUSTER_SPACE + 0.1 * QUEUE_HEIGHT)
SIDE_VIEW_HEIGHT = int(0.8 * QUEUE_HEIGHT)
SIDE_VIEW_WIDTH = int(QUEUE_X - SIDE_VIEW_X - CLUSTER_SPACE)
SIDE_VIEW_BORDER = int(0.001 * UNIT_LENGTH)

# PREVIEW_PAGE attributes
PREVIEW_SPACE = int(0.015 * UNIT_LENGTH)
PREVIEW_WIDTH = int(SIDE_VIEW_WIDTH - 2 * PREVIEW_SPACE)
PREVIEW_HEIGHT = int((SIDE_VIEW_HEIGHT - 5 * PREVIEW_SPACE)/4)
PREVIEW_BORDER = int(0.003 * UNIT_LENGTH)
PREVIEW_BORDER_SELECTED = int(0.009 * UNIT_LENGTH)

PREVIEW_JOB_SPACE = int(0.1 * PREVIEW_WIDTH)
PREVIEW_JOB_X = PREVIEW_JOB_SPACE
PREVIEW_JOB_HEIGHT = int((PREVIEW_HEIGHT - 9 * PREVIEW_JOB_SPACE)/8)
PREVIEW_JOB_WIDTH = int((PREVIEW_WIDTH - 2 * PREVIEW_JOB_SPACE)/4)
PREVIEW_JOB_RUNNING_X = int(PREVIEW_JOB_X + PREVIEW_JOB_SPACE)
PREVIEW_JOB_RUNNING_Y = int(PREVIEW_JOB_SPACE)

# DEVICE attributes
DEVICE_SPACE_FROM_CLUSTER = 0.12 * CLUSTER_HEIGHT
DEVICE_SPACE_VER = int(0.015 * UNIT_LENGTH)
DEVICE_SPACE_COL = int(0.02 * UNIT_LENGTH)
DEVICE_WIDTH = int((CLUSTER_WIDTH - 5 * DEVICE_SPACE_COL)/4)
DEVICE_HEIGHT = int((CLUSTER_HEIGHT - 5 * DEVICE_SPACE_VER - DEVICE_SPACE_FROM_CLUSTER)/4)
DEVICE_BORDER = int(0.005 * UNIT_LENGTH)
DEVICE_BORDER_SELECTED = int(DEVICE_BORDER * 1.5)

# GPU attributes
GPU_SPACE = int(0.005 * UNIT_LENGTH)
GPU_SPACE_TOP = int(DEVICE_HEIGHT/2 + 0.01 * UNIT_LENGTH)
GPU_WIDTH = int((DEVICE_WIDTH - 5 * GPU_SPACE)/4)
GPU_HEIGHT = GPU_WIDTH
GPU_BORDER = int(0.003 * UNIT_LENGTH)
GPU_BORDER_SELECTED = int(0.005 * UNIT_LENGTH)

# CPU attributes
CPU_Y = int(0.4 * DEVICE_HEIGHT)
CPU_X = int(DEVICE_WIDTH/4)
CPU_RADIUS = int(0.008 * UNIT_LENGTH)
CPU_BORDER = int(0.002 * UNIT_LENGTH)

# JOB attributes
JOB_SPACE = 0.01 * UNIT_LENGTH
JOB_WDITH = int(QUEUE_WIDTH - 2 * JOB_SPACE)
JOB_HEIGHT = int((QUEUE_HEIGHT - 9 * JOB_SPACE) / 8)
JOB_BORDER = int(0.005 * UNIT_LENGTH)
JOB_BORDER_SELECTED = int(0.009 * UNIT_LENGTH)

ID_RECT_X = int(0.15 * JOB_WDITH)
ID_RECT_Y = int(0.1 * JOB_HEIGHT)
ID_RECT_WIDTH = int(0.4 * JOB_HEIGHT)
JOB_SIZE_X = int(ID_RECT_X + ID_RECT_WIDTH + 0.05 * JOB_WDITH)
JOB_SIZE_Y = ID_RECT_Y
JOB_SIZE_WIDTH = int(0.15 * JOB_WDITH)
JOB_SIZE_HEIGHT = ID_RECT_WIDTH
JOB_SIZE_MAX = JOB_SIZE_Y + JOB_SIZE_HEIGHT
JOB_SIZE_BORDER = int(0.003 * UNIT_LENGTH)

SPEED_ONE_X = int(ID_RECT_X + JOB_SIZE_X + 0.05 * JOB_WDITH)
SPEED_ONE_Y = ID_RECT_Y
SPEED_TWO_X = SPEED_ONE_X
SPEED_TWO_Y = SPEED_ONE_Y + ID_RECT_WIDTH
SPEED_THREE_X = int(SPEED_ONE_X + 0.08 * JOB_WDITH)
SPEED_THREE_Y = int(ID_RECT_Y + 0.5 * ID_RECT_WIDTH)
SPEED_SPACE = int(0.05 * JOB_WDITH + SPEED_THREE_X - SPEED_ONE_X)
SPEED_BORDER = int(0.003 * UNIT_LENGTH)

GPU_REQUIRE_X = ID_RECT_X
GPU_REQUIRE_Y = int(ID_RECT_Y + ID_RECT_WIDTH + 0.05 * JOB_HEIGHT)
GPU_REQUIRE_WIDTH = int(0.8 * JOB_WDITH)
GPU_REQUIRE_HEIGHT = int(0.2 * JOB_HEIGHT)
GPU_REQUIRE_BORDER = int(0.003 * UNIT_LENGTH)
GPU_REQUIRE_CUBE_WIDTH = (0.1 * GPU_REQUIRE_WIDTH)
GPU_REQUIRE_CUBE_HEIGHT = GPU_REQUIRE_HEIGHT

ITERATION_BAR_X = GPU_REQUIRE_X
ITERATION_BAR_Y = int(GPU_REQUIRE_Y + GPU_REQUIRE_HEIGHT+ 0.06 * JOB_HEIGHT)
ITERATION_BAR_WIDTH = (GPU_REQUIRE_WIDTH / 2000)
ITERATION_BAR_HEIGHT = int(0.15 * JOB_HEIGHT)
ITERATION_BAR_BORDER = int(0.003 * UNIT_LENGTH)

RUNNING_ONE_X = int(0.12 * JOB_WDITH)
RUNNING_ONE_Y = ID_RECT_Y
RUNNING_TWO_X = int(0.03 * JOB_WDITH)
RUNNING_TWO_Y = ID_RECT_Y+int(0.5 * (ITERATION_BAR_Y + ITERATION_BAR_HEIGHT - ID_RECT_Y))
RUNNING_THREE_X = RUNNING_ONE_X
RUNNING_THREE_Y = int(ITERATION_BAR_Y + ITERATION_BAR_HEIGHT)
STOPPED_JOB_X = int(ID_RECT_X/2)
STOPPED_JOB_Y = int(JOB_HEIGHT/2)
STOPPED_JOB_RADIUS = int(0.06 * JOB_WDITH)
STOPPED_JOB_BORDER = int(0.003 * UNIT_LENGTH)

n = 1
def color_gen():
    global n
    r = int(random.random() * 256)
    g = int(random.random() * 256)
    b = int(random.random() * 256)
    step = 256 / n
    r += step
    g += step
    b += step
    r = int(r) % 256
    g = int(g) % 256
    b = int(b) % 256
    n += 1
    if n >= 256:
        n = 1
    return (r, g, b)

id_lst = []
def id_gen():
    global id_lst
    if len(id_lst) == 0:
        for i in range(50):
            r = random.randint(1, 100)
            if r not in id_lst: id_lst.append(r)
    return id_lst.pop()